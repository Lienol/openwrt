From 94972ba5210ab34f071b011e9001f7234860fe89 Mon Sep 17 00:00:00 2001
From: "Hardik S. Panchal" <hpanchal@codeaurora.org>
Date: Tue, 8 May 2018 10:16:32 +0530
Subject: [PATCH 281/500] net: Add API to update L4 protocol registrant.

Change-Id: I0d01fe33a590bb3eec596de621f86537f60c7071
Signed-off-by: Hardik S. Panchal <hpanchal@codeaurora.org>
Signed-off-by: Pavithra R <quic_pavir@quicinc.com>
---
 include/net/protocol.h |  4 ++++
 net/ipv4/protocol.c    | 26 ++++++++++++++++++++++++++
 net/ipv6/protocol.c    | 26 ++++++++++++++++++++++++++
 3 files changed, 56 insertions(+)

--- a/include/net/protocol.h
+++ b/include/net/protocol.h
@@ -104,12 +104,16 @@ int inet_add_protocol(const struct net_p
 int inet_del_protocol(const struct net_protocol *prot, unsigned char num);
 int inet_add_offload(const struct net_offload *prot, unsigned char num);
 int inet_del_offload(const struct net_offload *prot, unsigned char num);
+int inet_update_protocol(const struct net_protocol *new_prot,
+		unsigned char num, const struct net_protocol **old_prot);
 void inet_register_protosw(struct inet_protosw *p);
 void inet_unregister_protosw(struct inet_protosw *p);
 
 #if IS_ENABLED(CONFIG_IPV6)
 int inet6_add_protocol(const struct inet6_protocol *prot, unsigned char num);
 int inet6_del_protocol(const struct inet6_protocol *prot, unsigned char num);
+int inet6_update_protocol(const struct inet6_protocol *new_prot,
+		unsigned char num, const struct inet6_protocol **old_prot);
 int inet6_register_protosw(struct inet_protosw *p);
 void inet6_unregister_protosw(struct inet_protosw *p);
 #endif
--- a/net/ipv4/protocol.c
+++ b/net/ipv4/protocol.c
@@ -68,3 +68,29 @@ int inet_del_offload(const struct net_of
 	return ret;
 }
 EXPORT_SYMBOL(inet_del_offload);
+
+int inet_update_protocol(const struct net_protocol *new_prot,
+		unsigned char protocol, const struct net_protocol **old_prot)
+{
+	int ret;
+
+	rcu_read_lock();
+	*old_prot = rcu_dereference(inet_protos[protocol]);
+	if (!*old_prot) {
+		rcu_read_unlock();
+		return -1;
+	}
+	rcu_read_unlock();
+
+	/*
+	 * old_prot is not protected as cmpxchg is successful only if
+	 * old_prot matches with the value in inet_protos[protocol]
+	 */
+	ret = (cmpxchg((const struct net_protocol **)&inet_protos[protocol],
+			*old_prot, new_prot) == *old_prot) ? 0 : -1;
+
+	 synchronize_net();
+
+	 return ret;
+}
+EXPORT_SYMBOL(inet_update_protocol);
--- a/net/ipv6/protocol.c
+++ b/net/ipv6/protocol.c
@@ -44,6 +44,32 @@ int inet6_del_protocol(const struct inet
 	return ret;
 }
 EXPORT_SYMBOL(inet6_del_protocol);
+
+int inet6_update_protocol(const struct inet6_protocol *new_prot,
+		unsigned char protocol, const struct inet6_protocol **old_prot)
+{
+	int ret;
+
+	rcu_read_lock();
+	*old_prot = rcu_dereference(inet6_protos[protocol]);
+	if (!*old_prot) {
+		rcu_read_unlock();
+		return -1;
+	}
+	rcu_read_unlock();
+
+	/*
+	 * old_prot is not protected as cmpxchg is successful only if
+	 * old_prot matches with the value in inet6_protos[protocol]
+	 */
+	ret = (cmpxchg((const struct inet6_protocol **)&inet6_protos[protocol],
+			*old_prot, new_prot) == *old_prot) ? 0 : -1;
+
+	synchronize_net();
+
+	return ret;
+}
+EXPORT_SYMBOL(inet6_update_protocol);
 #endif
 
 const struct net_offload __rcu *inet6_offloads[MAX_INET_PROTOS] __read_mostly;
--- a/include/net/netns/xfrm.h
+++ b/include/net/netns/xfrm.h
@@ -84,6 +84,8 @@ struct netns_xfrm {
 	spinlock_t xfrm_policy_lock;
 	struct mutex xfrm_cfg_mutex;
 	struct delayed_work	nat_keepalive_work;
+	spinlock_t xfrm_event_lock;
+	struct list_head event_notifier_list;
 };
 
 #endif
--- a/include/net/xfrm.h
+++ b/include/net/xfrm.h
@@ -304,6 +304,21 @@ struct xfrm_state {
 	u8			dir;
 };
 
+enum xfrm_event_type {
+	XFRM_EVENT_NONE = 0,
+	XFRM_EVENT_STATE_ADD,
+	XFRM_EVENT_STATE_DEL,
+	XFRM_EVENT_MAX
+};
+
+struct xfrm_event_notifier {
+	struct list_head list;
+	void (*state_notify)(struct xfrm_state *x, enum xfrm_event_type event);
+};
+
+int xfrm_event_register_notifier(struct net *net, struct xfrm_event_notifier *event);
+void xfrm_event_unregister_notifier(struct net *net, struct xfrm_event_notifier *event);
+
 static inline struct net *xs_net(struct xfrm_state *x)
 {
 	return read_pnet(&x->xs_net);
@@ -312,6 +327,7 @@ static inline struct net *xs_net(struct
 /* xflags - make enum if more show up */
 #define XFRM_TIME_DEFER	1
 #define XFRM_SOFT_EXPIRE 2
+#define XFRM_STATE_OFFLOAD_NSS 4
 
 enum {
 	XFRM_STATE_VOID,
@@ -413,6 +429,7 @@ int xfrm_state_register_afinfo(struct xf
 int xfrm_state_unregister_afinfo(struct xfrm_state_afinfo *afinfo);
 struct xfrm_state_afinfo *xfrm_state_get_afinfo(unsigned int family);
 struct xfrm_state_afinfo *xfrm_state_afinfo_get_rcu(unsigned int family);
+struct xfrm_state_afinfo *xfrm_state_update_afinfo(unsigned int family, struct xfrm_state_afinfo *new);
 
 struct xfrm_input_afinfo {
 	u8			family;
@@ -443,6 +460,8 @@ struct xfrm_type {
 	int			(*output)(struct xfrm_state *, struct sk_buff *pskb);
 	int			(*reject)(struct xfrm_state *, struct sk_buff *,
 					  const struct flowi *);
+	/* Estimate maximal size of result of transformation of a dgram */
+	u32			(*get_mtu)(struct xfrm_state *, int size);
 };
 
 int xfrm_register_type(const struct xfrm_type *type, unsigned short family);
@@ -1670,6 +1689,7 @@ struct xfrm_state *xfrm_state_lookup_bya
 					    const xfrm_address_t *saddr,
 					    u8 proto,
 					    unsigned short family);
+void xfrm_state_change_notify(struct xfrm_state *x, enum xfrm_event_type);
 #ifdef CONFIG_XFRM_SUB_POLICY
 void xfrm_tmpl_sort(struct xfrm_tmpl **dst, struct xfrm_tmpl **src, int n,
 		    unsigned short family);
@@ -1714,7 +1734,7 @@ void xfrm_sad_getinfo(struct net *net, s
 void xfrm_spd_getinfo(struct net *net, struct xfrmk_spdinfo *si);
 u32 xfrm_replay_seqhi(struct xfrm_state *x, __be32 net_seq);
 int xfrm_init_replay(struct xfrm_state *x, struct netlink_ext_ack *extack);
-u32 xfrm_state_mtu(struct xfrm_state *x, int mtu);
+int xfrm_state_mtu(struct xfrm_state *x, int mtu);
 int __xfrm_init_state(struct xfrm_state *x, bool init_replay, bool offload,
 		      struct netlink_ext_ack *extack);
 int xfrm_init_state(struct xfrm_state *x);
--- a/net/xfrm/xfrm_policy.c
+++ b/net/xfrm/xfrm_policy.c
@@ -4296,6 +4296,10 @@ static int __net_init xfrm_net_init(stru
 	spin_lock_init(&net->xfrm.xfrm_policy_lock);
 	seqcount_spinlock_init(&net->xfrm.xfrm_policy_hash_generation, &net->xfrm.xfrm_policy_lock);
 	mutex_init(&net->xfrm.xfrm_cfg_mutex);
+	spin_lock_init(&net->xfrm.xfrm_event_lock);
+
+	INIT_LIST_HEAD(&net->xfrm.event_notifier_list);
+
 	net->xfrm.policy_default[XFRM_POLICY_IN] = XFRM_USERPOLICY_ACCEPT;
 	net->xfrm.policy_default[XFRM_POLICY_FWD] = XFRM_USERPOLICY_ACCEPT;
 	net->xfrm.policy_default[XFRM_POLICY_OUT] = XFRM_USERPOLICY_ACCEPT;
--- a/net/xfrm/xfrm_state.c
+++ b/net/xfrm/xfrm_state.c
@@ -28,8 +28,6 @@
 #include <linux/interrupt.h>
 #include <linux/kernel.h>
 
-#include <crypto/aead.h>
-
 #include "xfrm_hash.h"
 
 #define xfrm_state_deref_prot(table, net) \
@@ -777,6 +775,7 @@ int __xfrm_state_delete(struct xfrm_stat
 			sock_put(rcu_dereference_raw(x->encap_sk));
 
 		xfrm_dev_state_delete(x);
+		xfrm_state_change_notify(x, XFRM_EVENT_STATE_DEL);
 
 		/* All xfrm_state objects are created by xfrm_state_alloc.
 		 * The xfrm_state_alloc call gives a reference, and that
@@ -2990,6 +2989,20 @@ struct xfrm_state_afinfo *xfrm_state_get
 	return afinfo;
 }
 
+struct xfrm_state_afinfo *xfrm_state_update_afinfo(unsigned int family, struct xfrm_state_afinfo *new)
+{
+	struct xfrm_state_afinfo *afinfo;
+
+	spin_lock_bh(&xfrm_state_afinfo_lock);
+	afinfo = rcu_dereference_protected(xfrm_state_afinfo[family], lockdep_is_held(&xfrm_state_afinfo_lock));
+	rcu_assign_pointer(xfrm_state_afinfo[afinfo->family], new);
+	spin_unlock_bh(&xfrm_state_afinfo_lock);
+
+	synchronize_rcu();
+	return afinfo;
+}
+EXPORT_SYMBOL(xfrm_state_update_afinfo);
+
 void xfrm_flush_gc(void)
 {
 	flush_work(&xfrm_state_gc_work);
@@ -3011,38 +3024,16 @@ void xfrm_state_delete_tunnel(struct xfr
 }
 EXPORT_SYMBOL(xfrm_state_delete_tunnel);
 
-u32 xfrm_state_mtu(struct xfrm_state *x, int mtu)
+int xfrm_state_mtu(struct xfrm_state *x, int mtu)
 {
 	const struct xfrm_type *type = READ_ONCE(x->type);
-	struct crypto_aead *aead;
-	u32 blksize, net_adj = 0;
 
-	if (x->km.state != XFRM_STATE_VALID ||
-	    !type || type->proto != IPPROTO_ESP)
-		return mtu - x->props.header_len;
+	if (x->km.state == XFRM_STATE_VALID &&
+	    type && type->get_mtu)
+		return type->get_mtu(x, mtu);
 
-	aead = x->data;
-	blksize = ALIGN(crypto_aead_blocksize(aead), 4);
-
-	switch (x->props.mode) {
-	case XFRM_MODE_TRANSPORT:
-	case XFRM_MODE_BEET:
-		if (x->props.family == AF_INET)
-			net_adj = sizeof(struct iphdr);
-		else if (x->props.family == AF_INET6)
-			net_adj = sizeof(struct ipv6hdr);
-		break;
-	case XFRM_MODE_TUNNEL:
-		break;
-	default:
-		WARN_ON_ONCE(1);
-		break;
-	}
-
-	return ((mtu - x->props.header_len - crypto_aead_authsize(aead) -
-		 net_adj) & ~(blksize - 1)) + net_adj - 2;
+	return mtu - x->props.header_len;
 }
-EXPORT_SYMBOL_GPL(xfrm_state_mtu);
 
 int __xfrm_init_state(struct xfrm_state *x, bool init_replay, bool offload,
 		      struct netlink_ext_ack *extack)
@@ -3387,3 +3378,39 @@ void xfrm_audit_state_icvfail(struct xfr
 }
 EXPORT_SYMBOL_GPL(xfrm_audit_state_icvfail);
 #endif /* CONFIG_AUDITSYSCALL */
+
+void xfrm_state_change_notify(struct xfrm_state *x, enum xfrm_event_type type)
+{
+	struct xfrm_event_notifier *event;
+	struct net *net = xs_net(x);
+
+	rcu_read_lock();
+	list_for_each_entry_rcu(event, &net->xfrm.event_notifier_list, list) {
+		if (event->state_notify) {
+			event->state_notify(x, type);
+		}
+
+		BUG_ON(refcount_read(&x->refcnt) <= 0);
+	}
+
+	rcu_read_unlock();
+}
+EXPORT_SYMBOL(xfrm_state_change_notify);
+
+int xfrm_event_register_notifier(struct net *net, struct xfrm_event_notifier *event)
+{
+	spin_lock_bh(&net->xfrm.xfrm_event_lock);
+	list_add_tail_rcu(&event->list, &net->xfrm.event_notifier_list);
+	spin_unlock_bh(&net->xfrm.xfrm_event_lock);
+	return 0;
+}
+EXPORT_SYMBOL(xfrm_event_register_notifier);
+
+void xfrm_event_unregister_notifier(struct net *net, struct xfrm_event_notifier *event)
+{
+	spin_lock_bh(&net->xfrm.xfrm_event_lock);
+	list_del_rcu(&event->list);
+	spin_unlock_bh(&net->xfrm.xfrm_event_lock);
+	synchronize_rcu();
+}
+EXPORT_SYMBOL(xfrm_event_unregister_notifier);
--- a/net/xfrm/xfrm_user.c
+++ b/net/xfrm/xfrm_user.c
@@ -888,6 +888,8 @@ static struct xfrm_state *xfrm_state_con
 			goto error;
 	}
 
+	xfrm_state_change_notify(x, XFRM_EVENT_STATE_ADD);
+
 	return x;
 
 error:
@@ -926,6 +928,7 @@ static int xfrm_add_sa(struct sk_buff *s
 	if (err < 0) {
 		x->km.state = XFRM_STATE_DEAD;
 		xfrm_dev_state_delete(x);
+		xfrm_state_change_notify(x, XFRM_EVENT_STATE_DEL);
 		__xfrm_state_put(x);
 		goto out;
 	}
--- a/net/ipv4/esp4.c
+++ b/net/ipv4/esp4.c
@@ -37,6 +37,8 @@ struct esp_output_extra {
 
 #define ESP_SKB_CB(__skb) ((struct esp_skb_cb *)&((__skb)->cb[0]))
 
+static u32 esp4_get_mtu(struct xfrm_state *x, int mtu);
+
 /*
  * Allocate an AEAD request structure with extra space for SG and IV.
  *
@@ -680,7 +682,7 @@ static int esp_output(struct xfrm_state
 		struct xfrm_dst *dst = (struct xfrm_dst *)skb_dst(skb);
 		u32 padto;
 
-		padto = min(x->tfcpad, xfrm_state_mtu(x, dst->child_mtu_cached));
+		padto = min(x->tfcpad, esp4_get_mtu(x, dst->child_mtu_cached));
 		if (skb->len < padto)
 			esp.tfclen = padto - skb->len;
 	}
@@ -980,6 +982,28 @@ out:
 	return err;
 }
 
+static u32 esp4_get_mtu(struct xfrm_state *x, int mtu)
+{
+	struct crypto_aead *aead = x->data;
+	u32 blksize = ALIGN(crypto_aead_blocksize(aead), 4);
+	unsigned int net_adj;
+
+	switch (x->props.mode) {
+	case XFRM_MODE_TRANSPORT:
+	case XFRM_MODE_BEET:
+		net_adj = sizeof(struct iphdr);
+		break;
+	case XFRM_MODE_TUNNEL:
+		net_adj = 0;
+		break;
+	default:
+		BUG();
+	}
+
+	return ((mtu - x->props.header_len - crypto_aead_authsize(aead) -
+		 net_adj) & ~(blksize - 1)) + net_adj - 2;
+}
+
 static int esp4_err(struct sk_buff *skb, u32 info)
 {
 	struct net *net = dev_net(skb->dev);
@@ -1221,6 +1245,7 @@ static const struct xfrm_type esp_type =
 	.flags		= XFRM_TYPE_REPLAY_PROT,
 	.init_state	= esp_init_state,
 	.destructor	= esp_destroy,
+	.get_mtu	= esp4_get_mtu,
 	.input		= esp_input,
 	.output		= esp_output,
 };
--- a/net/ipv6/esp6.c
+++ b/net/ipv6/esp6.c
@@ -53,6 +53,8 @@ struct esp_output_extra {
 
 #define ESP_SKB_CB(__skb) ((struct esp_skb_cb *)&((__skb)->cb[0]))
 
+static u32 esp6_get_mtu(struct xfrm_state *x, int mtu);
+
 /*
  * Allocate an AEAD request structure with extra space for SG and IV.
  *
@@ -712,7 +714,7 @@ static int esp6_output(struct xfrm_state
 		struct xfrm_dst *dst = (struct xfrm_dst *)skb_dst(skb);
 		u32 padto;
 
-		padto = min(x->tfcpad, xfrm_state_mtu(x, dst->child_mtu_cached));
+		padto = min(x->tfcpad, esp6_get_mtu(x, dst->child_mtu_cached));
 		if (skb->len < padto)
 			esp.tfclen = padto - skb->len;
 	}
@@ -1022,6 +1024,19 @@ out:
 	return ret;
 }
 
+static u32 esp6_get_mtu(struct xfrm_state *x, int mtu)
+{
+	struct crypto_aead *aead = x->data;
+	u32 blksize = ALIGN(crypto_aead_blocksize(aead), 4);
+	unsigned int net_adj = 0;
+
+	if (x->props.mode != XFRM_MODE_TUNNEL)
+		net_adj = sizeof(struct ipv6hdr);
+
+	return ((mtu - x->props.header_len - crypto_aead_authsize(aead) -
+		 net_adj) & ~(blksize - 1)) + net_adj - 2;
+}
+
 static int esp6_err(struct sk_buff *skb, struct inet6_skb_parm *opt,
 		    u8 type, u8 code, int offset, __be32 info)
 {
@@ -1267,6 +1282,7 @@ static const struct xfrm_type esp6_type
 	.flags		= XFRM_TYPE_REPLAY_PROT,
 	.init_state	= esp6_init_state,
 	.destructor	= esp6_destroy,
+	.get_mtu	= esp6_get_mtu,
 	.input		= esp6_input,
 	.output		= esp6_output,
 };
--- a/net/xfrm/xfrm_device.c
+++ b/net/xfrm/xfrm_device.c
@@ -420,8 +420,9 @@ bool xfrm_dev_offload_ok(struct sk_buff
 
 	if (x->xso.type == XFRM_DEV_OFFLOAD_PACKET ||
 	    ((!dev || (dev == xfrm_dst_path(dst)->dev)) &&
-	     !xdst->child->xfrm)) {
-		mtu = xfrm_state_mtu(x, xdst->child_mtu_cached);
+	     !(xdst->child->xfrm && x->type->get_mtu))) {
+		mtu = x->type->get_mtu(x, xdst->child_mtu_cached);
+
 		if (skb->len <= mtu)
 			goto ok;
 
