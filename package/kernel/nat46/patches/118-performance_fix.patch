Author: Suruchi Agarwal <quic_suruchia@quicinc.com>
Date: Fri Dec 17 13:37:15 2021 -0800

    nat46: Performance fix

    Avoid allocating new skb and copy for map-t translation

    Change-Id: I621b90609b4642d64b6e4cfb98b105b3fcbb0365
    Signed-off-by: Suruchi Agarwal <quic_suruchia@quicinc.com>

--- a/nat46/modules/nat46-core.c
+++ b/nat46/modules/nat46-core.c
@@ -118,7 +118,7 @@ char *get_next_arg(char **ptail) {
   return pc;
 }
 
-/* 
+/*
  * Parse an IPv6 address (if pref_len is NULL), or prefix (if it isn't).
  * parses destructively (places \0 between address and prefix len)
  */
@@ -163,7 +163,7 @@ int try_parse_ipv4_prefix(u32 *v4addr, i
 }
 
 
-/* 
+/*
  * parse a rule argument and put config into a rule.
  * advance the tail to prepare for the next arg parsing.
  * destructive.
@@ -384,7 +384,7 @@ char *xlate_style_to_string(nat46_xlate_
   return "unknown";
 }
 
-/* 
+/*
  * Get the nat46 configuration into a supplied buffer (if non-null).
  */
 int nat46_get_ipair_config(nat46_instance_t *nat46, int ipair, char *buf, int count) {
@@ -985,6 +985,28 @@ __sum16 csum_ipv6_unmagic(nat46_instance
   return csum;
 }
 
+/* Update UDP with incremental checksum */
+__sum16 csum_ipv6_udp_remagic(struct ipv6hdr *ip6hdr, u32 csum) {
+    uint32_t sum;
+    sum = csum_partial(ip6hdr->saddr.s6_addr16, 2 * sizeof(ip6hdr->saddr), ~csum);
+    sum = ((sum >> 16) & 0xffff) + (sum & 0xffff);
+    sum += ((sum >> 16) & 0xffff);
+    return (u16)(~sum);
+}
+
+/* Undo the IPv4 pseudoheader inclusion into the checksum */
+__sum16 csum_ipv4_unmagic(__be32 saddr, __be32 daddr,
+                        u32 csum) {
+  u32 s;
+  uint32_t addr_csum;
+  csum = ntohs(~csum);
+  addr_csum =  (saddr & 0xffff)  + (saddr >> 16) + (daddr & 0xffff) + (daddr >> 16);
+  s= csum + ntohs(~addr_csum);
+  s = ((s >> 16) & 0xffff) + (s & 0xffff);
+  s += ((s >> 16) & 0xffff);
+  return htons((u16)(~s));
+}
+
 /* Update ICMPv6 type/code with incremental checksum adjustment */
 void update_icmp6_type_code(nat46_instance_t *nat46, struct icmp6hdr *icmp6h, u8 type, u8 code) {
   u16 old_tc = *((u16 *)icmp6h);
@@ -1038,9 +1060,8 @@ void fill_v6hdr_from_v4hdr(struct iphdr
   ip6h->hop_limit = iph->ttl;
 }
 
-void fill_v4hdr_from_v6hdr(struct iphdr * iph, struct ipv6hdr *ip6h, __u32 v4saddr, __u32 v4daddr, __u16 id, __u16 frag_off, __u16 proto, int l3_payload_len) {
-  uint32_t ver_class_flow = ntohl(*(__be32 *)ip6h);
-  iph->ttl = ip6h->hop_limit;
+void fill_v4hdr_from_v6hdr(struct iphdr * iph, uint32_t ver_class_flow, uint8_t hop_limit, __u32 v4saddr, __u32 v4daddr, __u16 id, __u16 frag_off, __u16 proto, int l3_payload_len) {
+  iph->ttl = hop_limit;
   iph->saddr = v4saddr;
   iph->daddr = v4daddr;
   iph->protocol = proto;
@@ -1198,6 +1219,8 @@ void pairs_xlate_v6_to_v4_inner(nat46_in
  */
 int xlate_payload6_to4(nat46_instance_t *nat46, void *pv6, void *ptrans_hdr, int v6_len, u16 *ul_sum, int *ptailTruncSize) {
   struct ipv6hdr *ip6h = pv6;
+  uint32_t ver_class_flow;
+  uint8_t hop_limit;
   __u32 v4saddr, v4daddr;
   struct iphdr new_ipv4;
   struct iphdr *iph = &new_ipv4;
@@ -1274,7 +1297,10 @@ int xlate_payload6_to4(nat46_instance_t
     }
   }
 
-  fill_v4hdr_from_v6hdr(iph, ip6h, v4saddr, v4daddr, ipid, ipflags, proto, infrag_payload_len);
+  ver_class_flow = ntohl(*(__be32 *)ip6h);
+  hop_limit = ip6h->hop_limit;
+
+  fill_v4hdr_from_v6hdr(iph, ver_class_flow, hop_limit, v4saddr, v4daddr, ipid, ipflags, proto, infrag_payload_len);
   if(ul_sum) {
     *ul_sum = unchecksum16(pv6, (((u8 *)ptrans_hdr)-((u8 *)pv6))/2, *ul_sum);
     *ul_sum = rechecksum16(iph, 10, *ul_sum);
@@ -1831,6 +1857,8 @@ EXPORT_SYMBOL(xlate_6_to_4);
 
 int nat46_ipv6_input(struct sk_buff *old_skb) {
   struct ipv6hdr *ip6h = ipv6_hdr(old_skb);
+  uint32_t ver_class_flow;
+  uint8_t hop_limit;
   nat46_xlate_rulepair_t *apair;
   nat46_instance_t *nat46 = get_nat46_instance(old_skb);
   uint16_t proto;
@@ -1839,22 +1867,20 @@ int nat46_ipv6_input(struct sk_buff *old
 
   struct iphdr * iph;
   __u32 v4saddr, v4daddr;
-  struct sk_buff * new_skb = 0;
   int err = 0;
-  int truncSize = 0;
   int tailTruncSize = 0;
   int v6packet_l3size = sizeof(*ip6h);
   int l3_infrag_payload_len = ntohs(ip6h->payload_len);
   int check_for_l4 = 0;
 
-  if (nat46 == NULL) {
+  if (unlikely(nat46 == NULL)) {
     printk("nat46:%p skb is dropped for no valid instance found\n", old_skb);
     return err;
   }
 
   nat46debug(4, "nat46_ipv6_input packet");
 
-  if(ip6_input_not_interested(nat46, ip6h, old_skb)) {
+  if(unlikely(ip6_input_not_interested(nat46, ip6h, old_skb))) {
     nat46debug(1, "nat46_ipv6_input not interested");
     goto done;
   }
@@ -1985,47 +2011,45 @@ int nat46_ipv6_input(struct sk_buff *old
     }
   }
 
-  new_skb = skb_copy(old_skb, GFP_ATOMIC); // other possible option: GFP_ATOMIC
-  if (!new_skb) {
-    nat46debug(0, "[nat46] Could not copy v6 skb");
-    goto done;
-  }
+  ver_class_flow = ntohl(*(__be32 *)ip6h);
+  hop_limit = ip6h->hop_limit;
 
   /* Remove any debris in the socket control block */
-  memset(IPCB(new_skb), 0, sizeof(struct inet_skb_parm));
+  memset(IPCB(old_skb), 0, sizeof(struct inet_skb_parm));
+
   /* Remove netfilter references to IPv6 packet, new netfilter references will be created based on IPv4 packet */
 #if LINUX_VERSION_CODE < KERNEL_VERSION(5,4,0)
-  nf_reset(new_skb);
+  nf_reset(old_skb);
 #else
-  skb_ext_reset(new_skb);
-  nf_reset_ct(new_skb);
+  skb_ext_reset(old_skb);
+  nf_reset_ct(old_skb);
 #endif
 
   /* modify packet: actual IPv6->IPv4 transformation */
-  truncSize = v6packet_l3size - sizeof(struct iphdr); /* chop first 20 bytes */
-  skb_pull(new_skb, truncSize);
-  skb_put(new_skb, -tailTruncSize);
+  skb_pull(old_skb, sizeof(struct iphdr));
   l3_infrag_payload_len -= tailTruncSize;
-  skb_reset_network_header(new_skb);
-  skb_set_transport_header(new_skb,IPV4HDRSIZE); /* transport (TCP/UDP/ICMP/...) header starts after 20 bytes */
+  skb_reset_mac_header(old_skb);
+  skb_reset_network_header(old_skb);
+  skb_set_transport_header(old_skb,IPV4HDRSIZE); /* transport (TCP/UDP/ICMP/...) header starts after 20 bytes */
 
   /* build IPv4 header */
-  iph = ip_hdr(new_skb);
-  fill_v4hdr_from_v6hdr(iph, ip6h, v4saddr, v4daddr, frag_id, frag_off, proto, l3_infrag_payload_len);
-  new_skb->protocol = htons(ETH_P_IP);
+  iph = ip_hdr(old_skb);
+  fill_v4hdr_from_v6hdr(iph, ver_class_flow, hop_limit, v4saddr, v4daddr, frag_id, frag_off, proto, l3_infrag_payload_len);
+  old_skb->protocol = htons(ETH_P_IP);
 
   if (ntohs(iph->tot_len) >= 2000) {
     nat46debug(0, "Too big IP len: %d", ntohs(iph->tot_len));
   }
 
-  nat46debug(5, "about to send v4 packet, flags: %02x",  IPCB(new_skb)->flags);
-  nat46_netdev_count_xmit(new_skb, old_skb->dev);
+  nat46debug(5, "about to send v4 packet, flags: %02x",  IPCB(old_skb)->flags);
+  nat46_netdev_count_xmit(old_skb, old_skb->dev);
 
-  /* set skb->iif */
-  new_skb->skb_iif = old_skb->skb_iif;
-
-  netif_rx(new_skb);
+  netif_rx(old_skb);
 
+  /*
+   * skb was consumed in the ipv4 format, don't release later.
+   */
+  err = 1;
   /* TBD: should copy be released here? */
 
 done:
@@ -2056,7 +2080,7 @@ bool nat46_get_info(struct net_device *d
 }
 EXPORT_SYMBOL(nat46_get_info);
 
-void ip6_update_csum(struct sk_buff * skb, struct ipv6hdr * ip6hdr, int do_atomic_frag)
+void ip6_update_csum(struct sk_buff * skb, struct ipv6hdr * ip6hdr, uint32_t v4saddr, uint32_t v4daddr, int do_atomic_frag)
 {
   u32 sum1=0;
   u16 sum2=0;
@@ -2079,12 +2103,13 @@ void ip6_update_csum(struct sk_buff * sk
       struct udphdr *udp = udp_hdr(skb);
       unsigned udplen = ntohs(ip6hdr->payload_len) - (do_atomic_frag?8:0); /* UDP hdr + payload */
 
-      oldsum = udp->check;
-      udp->check = 0;
-
-      sum1 = csum_partial((char*)udp, udplen, 0); /* calculate checksum for UDP hdr+payload */
-      sum2 = csum_ipv6_magic(&ip6hdr->saddr, &ip6hdr->daddr, udplen, ip6hdr->nexthdr, sum1); /* add pseudoheader */
-
+      if (!udp->check) {
+          sum1 = csum_partial((char*)udp, udplen, 0); /* calculate checksum for UDP hdr+payload */
+          sum2 = csum_ipv6_magic(&ip6hdr->saddr, &ip6hdr->daddr, udplen, ip6hdr->nexthdr, sum1); /* add pseudoheader */
+      } else {
+          sum1 = csum_ipv4_unmagic(v4saddr, v4daddr, udp->check);
+          sum2 = csum_ipv6_udp_remagic(ip6hdr, sum1);
+      }
       udp->check = sum2;
 
       break;
@@ -2348,7 +2373,6 @@ static uint16_t nat46_get_ce_port(nat46_
 int nat46_ipv4_input(struct sk_buff *old_skb) {
   nat46_instance_t *nat46 = get_nat46_instance(old_skb);
   nat46_xlate_rulepair_t apair;
-  struct sk_buff *new_skb;
   uint16_t sport = 0, dport = 0, ret = 0;
 
   int err = 0;
@@ -2360,10 +2384,15 @@ int nat46_ipv4_input(struct sk_buff *old
 
   struct ipv6hdr * hdr6;
   struct iphdr * hdr4 = ip_hdr(old_skb);
+  uint32_t v4saddr, v4daddr;
+  uint8_t ttl;
+  uint16_t tot_len;
+  uint8_t protocol;
+  uint16_t frag_off, id;
 
   char v6saddr[16], v6daddr[16];
 
-  if (nat46 == NULL) {
+  if (unlikely(nat46 == NULL)) {
     printk("nat46:%p skb is dropped for no valid instance found\n", old_skb);
     return err;
   }
@@ -2443,31 +2472,39 @@ int nat46_ipv4_input(struct sk_buff *old
     goto done;
   }
 
-  new_skb = skb_copy(old_skb, GFP_ATOMIC);
-  if (!new_skb) {
-    nat46debug(0, "[nat46] Could not copy v4 skb");
-    goto done;
-  }
+  v4saddr = hdr4->saddr;
+  v4daddr = hdr4->daddr;
+  protocol = hdr4->protocol;
+  tot_len = hdr4->tot_len;
+  ttl = hdr4->ttl;
+  frag_off = hdr4->frag_off;
+  id = hdr4->id;
 
   /* Remove any debris in the socket control block */
-  memset(IP6CB(new_skb), 0, sizeof(struct inet6_skb_parm));
+  memset(IP6CB(old_skb), 0, sizeof(struct inet6_skb_parm));
   /* Remove netfilter references to IPv4 packet, new netfilter references will be created based on IPv6 packet */
 #if LINUX_VERSION_CODE < KERNEL_VERSION(5,4,0)
-  nf_reset(new_skb);
+  nf_reset(old_skb);
 #else
-  skb_ext_reset(new_skb);
-  nf_reset_ct(new_skb);
+  skb_ext_reset(old_skb);
+  nf_reset_ct(old_skb);
 #endif
 
   /* expand header (add 20 extra bytes at the beginning of sk_buff) */
-  pskb_expand_head(new_skb, IPV6HDRSIZE - (hdr4->ihl << 2) + (add_frag_header?8:0), 0, GFP_ATOMIC);
+  if (skb_headroom(old_skb) < IPV6V4HDRDELTA) {
+    ret = pskb_expand_head(old_skb, IPV6V4HDRDELTA + (add_frag_header?8:0), 0, GFP_ATOMIC);
+    if (unlikely(ret)) {
+      nat46debug(0, "[nat46] Could not expand skb header");
+      goto done;
+    }
+  }
 
-  skb_push(new_skb, IPV6HDRSIZE - (hdr4->ihl << 2) + (add_frag_header?8:0)); /* push boundary by extra 20 bytes */
+  skb_push(old_skb, IPV6HDRSIZE - (hdr4->ihl << 2) + (add_frag_header?8:0)); /* push boundary by extra 20 bytes */
 
-  skb_reset_network_header(new_skb);
-  skb_set_transport_header(new_skb, IPV6HDRSIZE + (add_frag_header?8:0) ); /* transport (TCP/UDP/ICMP/...) header starts after 40 bytes */
+  skb_reset_network_header(old_skb);
+  skb_set_transport_header(old_skb, IPV6HDRSIZE + (add_frag_header?8:0) ); /* transport (TCP/UDP/ICMP/...) header starts after 40 bytes */
 
-  hdr6 = ipv6_hdr(new_skb);
+  hdr6 = ipv6_hdr(old_skb);
   memset(hdr6, 0, sizeof(*hdr6) + (add_frag_header?8:0));
 
   /* build IPv6 header */
@@ -2475,13 +2512,14 @@ int nat46_ipv4_input(struct sk_buff *old
   *(__be32 *)hdr6 = htonl(0x60000000 | (tclass << 20)) | flowlabel; /* version, priority, flowlabel */
 
   /* IPv6 length is a payload length, IPv4 is hdr+payload */
-  hdr6->payload_len = htons(ntohs(hdr4->tot_len) - (hdr4->ihl << 2) + (add_frag_header?8:0));
-  hdr6->nexthdr = hdr4->protocol;
-  hdr6->hop_limit = hdr4->ttl;
+  hdr6->payload_len = htons(ntohs(tot_len) - sizeof(struct iphdr) + (add_frag_header?8:0));
+  hdr6->nexthdr = protocol;
+  hdr6->hop_limit = ttl;
+
   memcpy(&hdr6->saddr, v6saddr, 16);
   memcpy(&hdr6->daddr, v6daddr, 16);
 
-  new_skb->protocol = htons(ETH_P_IPV6);
+  old_skb->protocol = htons(ETH_P_IPV6);
 
   if (add_frag_header) {
     struct frag_hdr *fh = (struct frag_hdr*)(hdr6 + 1);
@@ -2490,8 +2528,8 @@ int nat46_ipv4_input(struct sk_buff *old
     /* Flag to represent whether PSID is assigned to MAP-T node or not */
     bool is_psid = false;
 
-    fh->frag_off = htons(((ntohs(hdr4->frag_off) >> 13) & 7) + ((ntohs(hdr4->frag_off) & 0x1FFF) << 3));
-    fh->nexthdr = hdr4->protocol;
+    fh->frag_off = htons(((ntohs(frag_off) >> 13) & 7) + ((ntohs(frag_off) & 0x1FFF) << 3));
+    fh->nexthdr = protocol;
 
     /*
      * PSID assigned MAP-T node will have non-zero ea_len and we are currently
@@ -2506,29 +2544,30 @@ int nat46_ipv4_input(struct sk_buff *old
       if (ce_port_num) {
         fh->identification = htonl(ce_port_num);
       } else {
-        fh->identification = htonl(ntohs(hdr4->id));
+        fh->identification = htonl(ntohs(id));
       }
     } else {
-      fh->identification = htonl(ntohs(hdr4->id));
+      fh->identification = htonl(ntohs(id));
     }
 
 
   }
-  ip6_update_csum(new_skb, hdr6, add_frag_header);
+  ip6_update_csum(old_skb, hdr6, v4saddr, v4daddr, add_frag_header);
 
-  hdr6->nexthdr = add_frag_header ? NEXTHDR_FRAGMENT : hdr4->protocol;
+  hdr6->nexthdr = add_frag_header ? NEXTHDR_FRAGMENT : protocol;
 
 
   // FIXME: check if you can not fit the packet into the cached MTU
-  // if (dst_mtu(skb_dst(new_skb))==0) { }
-
-  nat46debug(5, "about to send v6 packet, flags: %02x",  IP6CB(new_skb)->flags);
-  nat46_netdev_count_xmit(new_skb, old_skb->dev);
+  // if (dst_mtu(skb_dst(old_skb))==0) { }
 
-  /* set skb->iif */
-  new_skb->skb_iif = old_skb->skb_iif;
+  nat46debug(5, "about to send v6 packet, flags: %02x",  IPCB(old_skb)->flags);
+  nat46_netdev_count_xmit(old_skb, old_skb->dev);
+  netif_rx(old_skb);
 
-  netif_rx(new_skb);
+  /*
+   * skb was reused, needn't free it later.
+   */
+  err = 1;
 
 done:
   release_nat46_instance(nat46);
--- a/nat46/modules/nat46-core.h
+++ b/nat46/modules/nat46-core.h
@@ -39,7 +39,7 @@
 #define IPV4HDRSIZE 20
 #define IPV6V4HDRDELTA (IPV6HDRSIZE - IPV4HDRSIZE)
 
-/* 
+/*
  * A generic v4<->v6 translation structure.
  * The currently supported translation styles:
  */
--- a/nat46/modules/nat46-netdev.c
+++ b/nat46/modules/nat46-netdev.c
@@ -100,8 +100,7 @@ static netdev_tx_t nat46_netdev_xmit(str
 
 	if(ETH_P_IP == ntohs(skb->protocol)) {
 		ret = nat46_ipv4_input(skb);
-	}
-	if(ETH_P_IPV6 == ntohs(skb->protocol)) {
+	}else if(ETH_P_IPV6 == ntohs(skb->protocol)) {
 		ret = nat46_ipv6_input(skb);
 	}
 	if(0 == ret) {
@@ -174,6 +173,7 @@ static void nat46_netdev_setup(struct ne
 	dev->mtu = 16384; /* iptables does reassembly. Rather than using ETH_DATA_LEN, let's try to get as much mileage as we can with the Linux stack */
 	dev->features = NETIF_F_NETNS_LOCAL;
 	dev->flags = IFF_NOARP | IFF_POINTOPOINT;
+	dev->priv_flags_ext = IFF_EXT_MAPT;
 }
 
 int nat46_netdev_create(char *basename, struct net_device **dev)
